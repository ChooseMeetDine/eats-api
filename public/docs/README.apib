# eats-api
An Express/SocketIO-application that functions as a backend API for the Eats client (web app).

# GET /docs
+ response 200 (text/html)

# Group /polls

## Only registered users [/polls]

### Create poll [POST]

+ Parameters

  + name (string, required) - Name of the poll

  + restaurants (array, optional) - Restaurant ID's as strings to add to this poll
      + Default: []

  + users (array, optional) - User ID's as strings to add to this poll
      + Default: []

  + expires (string, optional) - Time of expiry, formatted as ISO 8601
      + Default: 20 minutes after request is received

  + allowNewRestaurants (boolean, optional) - Allow new restaurants to be added to poll after it has begun
      + Default: true

  + group (number, optional) - Group ID as string that this poll belongs to. Null for no group connection.
      + Default: null


+ Request (application/json)

{
  "name": "Name of the restaurant",
  "expires": "2017-08-07T10:46:40+00:00",
  "restaurants": ["234123","12412332"],
  "users": ["7545345", "6663523", "45656855"],
  "group": "989098098",
  "allowNewRestaurants": true
}

+ Response 200 (application/json)

{
  "data": {
    "type": "poll",
    "id": "123123123",
    "attributes": {
      "name": "Name of the restaurant",
      "expires": "2017-08-07T10:46:40Z",
      "created": "2016-02-01T15:20:05Z",
      "allow_new_restaurants": true
    },
    "relationships": {
      "creator": {
        "data": {
          "type": "user",
          "id": "7545345",
        }
      },
      "restaurants": {
        "data": [{
          "type": "restaurant",
          "id": "234123",
        }, {
          "type": "restaurant",
          "id": "12412332",
        }]
      },
      "users": {
        "data": [{
          "type": "user",
          "id": "7545345",
        }, {
          "type": "user",
          "id": "6663523",
        }, {
          "type": "user",
          "id": "45656855",
        }]
      },
      "group": {
        "data": {
          "type": "group",
          "id": "45656855"
        }
      }
    }
  },
  "links": {
    "self": "www.path.to.api/polls/123123123"
  },
  "included": [{
    "type": "restaurant",
    "id": "234123",
    "attributes": {
      "name": "Din Restaurang",
      "latitude": 56.1234,
      "longitude": 14.1234,
      "temporary": false,
      "status": "accepted"
    },
    "links": {
      "self": "/restaurants/234123"
    }
  }, {
    "type": "restaurant",
    "id": "12412332",
    "attributes": {
      "name": "Vår Restaurang",
      "latitude": 56.1234,
      "longitude": 14.1234,
      "temporary": false,
      "status": "accepted"
    },
    "links": {
      "self": "/restaurants/12412332"
    }
  }, {
    "type": "user",
    "id": "7545345",
    "attributes": {
      "name": "Per Persson",
      "photo": "https://imgur.com/erqwfdsco92.jpg",
      "anonymous": false
    },
    "links": {
      "self": "/users/7545345"
    }
  }, {
    "type": "user",
    "id": "6663523",
    "attributes": {
      "name": "Lukas Lukasson",
      "photo": "http://photo.com/1234.jpg",
      "anonymous": false
    },
    "links": {
      "self": "/users/06663523"
    }
  }, {
    "type": "user",
    "id": "45656855",
    "attributes": {
      "name": "Mats Mattsson",
      "anonymous": true
    },
    "links": {
      "self": "/users/45656855"
    }
  }, {
    "type": "group",
    "id": "45656855",
    "attributes": {
      "name": "Vi som älskar burgare på Odd Hill"
    },
    "links": {
      "self": "/groups/45656855"
    }
  }]
}

# Group /restaurants

## Any user [/restaurants]

### Add a restaurant [POST]

{
+ Parameters

 + name (string, required) - Name of the restaurant

 + category (array, optional) - Food category IDs to add to this restaurant
     + Default: []

 + priceRate (number, optional) - Price rate for this restaurant from 1 to 5 range
     + Default: null

 + rating (number, optional) - Rating star for this restaurant from 1 to 5 range
     + Default: null

 + info (string, optional) - Address and other additional information relevant to this restaurant
     + Default: null

 + photo (string, optional) - Link to the photo of the restaurant
     + Default: null

 + longitude (number, required) - Longitude coordinate of this restaurant in WGS84 format

 + latitude (number, required) - Latitude coordinate of this restaurant in WGS84 format

 + temporary (boolean, optional) - Temporary restaurants are only used in one poll Coordinates are not required for temporary restaurants
     + Default: false

}

+ Request (application/json)

{
"name": "Restaurant name",
"category": [23412,12412],
"priceRate": 4,
"rating": 5,
"info": "Nordenskiöldsgatan 1, Malmö",
"photo":"http://photo.com/1234.jpg",
"temporary": false,
"longitude": 13.00073,
"latitude": 55.60587
}


+ Response 201(application/json)

{
   "links": {
       "self": "/restaurants/321321"
   },
   "data":{
       "type": "restaurant",
       "id": "321321",
       "attributes": {
           "name": "Restaurant name",
           "info": "Nordenskiöldsgatan 1, Malmö",
           "photo": "http://photo.com/1234.jpg",
           "priceRate": 4,
           "rating": 5,
           "numberOfPolls": 0,
           "numberOfPollsWon": 0,
           "longitude": 13.00073,
           "latitude": 55.60587,
           "temporary": false,
           "status": "unexamined"
       },
       "relationships": {
           "category": {
               "data": [
                   {
                       "type": "category",
                       "id": "23412"
                   },
                   {
                       "type": "category",
                       "id": "12412"
                   }
               ]
           }
       }
   },
   "included": [
       {
           "type": "category",
           "id": "23412",
           "attributes": {
               "name": "fish"
           }
       },
       {
           "type": "category",
           "id": "12412",
           "attributes": {
               "name": "vegan"
           }
       }
   ]
  }

# Group /auth

## For authentication of registered user and authorization to restricted endpoints [/auth]

### Authenticate user [POST]

+ Parameters

  + email (string, required) - email of registered account

  + password (string, required) - password of registered account


+ Request (application/json)

{
  "email":"user_email@mail.com",
  "password": "yourpassword"
}

+ Response 200 (application/json)

{
  "authentication": true,
  "message": "Welcome user_name",
  "token": "aaaaaaaaaa.bbbbbbbbbbb.cccccccccccc"
}
